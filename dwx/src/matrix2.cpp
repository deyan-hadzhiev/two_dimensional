#include "matrix2.h"
#include <math.h>
#include <xmmintrin.h>

Matrix4 operator * (const Matrix4& a, const Matrix4& b) noexcept {
	Matrix4 c(0.f);
	const __m128 row1 = _mm_load_ps(&b.ma[0x0]);
	const __m128 row2 = _mm_load_ps(&b.ma[0x4]);
	const __m128 row3 = _mm_load_ps(&b.ma[0x8]);
	const __m128 row4 = _mm_load_ps(&b.ma[0xc]);
	for (int i = 0; i < 4; ++i) {
		const __m128 brod1 = _mm_set1_ps(a.ma[4 * i + 0]);
		const __m128 brod2 = _mm_set1_ps(a.ma[4 * i + 1]);
		const __m128 brod3 = _mm_set1_ps(a.ma[4 * i + 2]);
		const __m128 brod4 = _mm_set1_ps(a.ma[4 * i + 3]);
		const __m128 row = _mm_add_ps(
			_mm_add_ps(
				_mm_mul_ps(brod1, row1),
				_mm_mul_ps(brod2, row2)
				),
			_mm_add_ps(
				_mm_mul_ps(brod3, row3),
				_mm_mul_ps(brod4, row4)
				)
			);
		_mm_store_ps(&c.ma[4 * i], row);
	}
	return c;
}

Matrix4 inverseMatrix(const Matrix4& m) noexcept {
	float inv[16] = { 0 };
	float det = 0;

	inv[0x0] =
		m.ma[0x5] * m.ma[0xa] * m.ma[0xf] -
		m.ma[0x5] * m.ma[0xb] * m.ma[0xe] -
		m.ma[0x9] * m.ma[0x6] * m.ma[0xf] +
		m.ma[0x9] * m.ma[0x7] * m.ma[0xe] +
		m.ma[0xd] * m.ma[0x6] * m.ma[0xb] -
		m.ma[0xd] * m.ma[0x7] * m.ma[0xa];

	inv[0x4] = -
		m.ma[0x4] * m.ma[0xa] * m.ma[0xf] +
		m.ma[0x4] * m.ma[0xb] * m.ma[0xe] +
		m.ma[0x8] * m.ma[0x6] * m.ma[0xf] -
		m.ma[0x8] * m.ma[0x7] * m.ma[0xe] -
		m.ma[0xc] * m.ma[0x6] * m.ma[0xb] +
		m.ma[0xc] * m.ma[0x7] * m.ma[0xa];

	inv[0x8] =
		m.ma[0x4] * m.ma[0x9] * m.ma[0xf] -
		m.ma[0x4] * m.ma[0xb] * m.ma[0xd] -
		m.ma[0x8] * m.ma[0x5] * m.ma[0xf] +
		m.ma[0x8] * m.ma[0x7] * m.ma[0xd] +
		m.ma[0xc] * m.ma[0x5] * m.ma[0xb] -
		m.ma[0xc] * m.ma[0x7] * m.ma[0x9];

	inv[0xc] = -
		m.ma[0x4] * m.ma[0x9] * m.ma[0xe] +
		m.ma[0x4] * m.ma[0xa] * m.ma[0xd] +
		m.ma[0x8] * m.ma[0x5] * m.ma[0xe] -
		m.ma[0x8] * m.ma[0x6] * m.ma[0xd] -
		m.ma[0xc] * m.ma[0x5] * m.ma[0xa] +
		m.ma[0xc] * m.ma[0x6] * m.ma[0x9];

	inv[0x1] = -
		m.ma[0x1] * m.ma[0xa] * m.ma[0xf] +
		m.ma[0x1] * m.ma[0xb] * m.ma[0xe] +
		m.ma[0x9] * m.ma[0x2] * m.ma[0xf] -
		m.ma[0x9] * m.ma[0x3] * m.ma[0xe] -
		m.ma[0xd] * m.ma[0x2] * m.ma[0xb] +
		m.ma[0xd] * m.ma[0x3] * m.ma[0xa];

	inv[0x5] =
		m.ma[0x0] * m.ma[0xa] * m.ma[0xf] -
		m.ma[0x0] * m.ma[0xb] * m.ma[0xe] -
		m.ma[0x8] * m.ma[0x2] * m.ma[0xf] +
		m.ma[0x8] * m.ma[0x3] * m.ma[0xe] +
		m.ma[0xc] * m.ma[0x2] * m.ma[0xb] -
		m.ma[0xc] * m.ma[0x3] * m.ma[0xa];

	inv[0x9] = -
		m.ma[0x0] * m.ma[0x9] * m.ma[0xf] +
		m.ma[0x0] * m.ma[0xb] * m.ma[0xd] +
		m.ma[0x8] * m.ma[0x1] * m.ma[0xf] -
		m.ma[0x8] * m.ma[0x3] * m.ma[0xd] -
		m.ma[0xc] * m.ma[0x1] * m.ma[0xb] +
		m.ma[0xc] * m.ma[0x3] * m.ma[0x9];

	inv[0xd] =
		m.ma[0x0] * m.ma[0x9] * m.ma[0xe] -
		m.ma[0x0] * m.ma[0xa] * m.ma[0xd] -
		m.ma[0x8] * m.ma[0x1] * m.ma[0xe] +
		m.ma[0x8] * m.ma[0x2] * m.ma[0xd] +
		m.ma[0xc] * m.ma[0x1] * m.ma[0xa] -
		m.ma[0xc] * m.ma[0x2] * m.ma[0x9];

	inv[0x2] =
		m.ma[0x1] * m.ma[0x6] * m.ma[0xf] -
		m.ma[0x1] * m.ma[0x7] * m.ma[0xe] -
		m.ma[0x5] * m.ma[0x2] * m.ma[0xf] +
		m.ma[0x5] * m.ma[0x3] * m.ma[0xe] +
		m.ma[0xd] * m.ma[0x2] * m.ma[0x7] -
		m.ma[0xd] * m.ma[0x3] * m.ma[0x6];

	inv[0x6] = -
		m.ma[0x0] * m.ma[0x6] * m.ma[0xf] +
		m.ma[0x0] * m.ma[0x7] * m.ma[0xe] +
		m.ma[0x4] * m.ma[0x2] * m.ma[0xf] -
		m.ma[0x4] * m.ma[0x3] * m.ma[0xe] -
		m.ma[0xc] * m.ma[0x2] * m.ma[0x7] +
		m.ma[0xc] * m.ma[0x3] * m.ma[0x6];

	inv[0xa] =
		m.ma[0x0] * m.ma[0x5] * m.ma[0xf] -
		m.ma[0x0] * m.ma[0x7] * m.ma[0xd] -
		m.ma[0x4] * m.ma[0x1] * m.ma[0xf] +
		m.ma[0x4] * m.ma[0x3] * m.ma[0xd] +
		m.ma[0xc] * m.ma[0x1] * m.ma[0x7] -
		m.ma[0xc] * m.ma[0x3] * m.ma[0x5];

	inv[0xe] = -
		m.ma[0x0] * m.ma[0x5] * m.ma[0xe] +
		m.ma[0x0] * m.ma[0x6] * m.ma[0xd] +
		m.ma[0x4] * m.ma[0x1] * m.ma[0xe] -
		m.ma[0x4] * m.ma[0x2] * m.ma[0xd] -
		m.ma[0xc] * m.ma[0x1] * m.ma[0x6] +
		m.ma[0xc] * m.ma[0x2] * m.ma[0x5];

	inv[0x3] = -
		m.ma[0x1] * m.ma[0x6] * m.ma[0xb] +
		m.ma[0x1] * m.ma[0x7] * m.ma[0xa] +
		m.ma[0x5] * m.ma[0x2] * m.ma[0xb] -
		m.ma[0x5] * m.ma[0x3] * m.ma[0xa] -
		m.ma[0x9] * m.ma[0x2] * m.ma[0x7] +
		m.ma[0x9] * m.ma[0x3] * m.ma[0x6];

	inv[0x7] =
		m.ma[0x0] * m.ma[0x6] * m.ma[0xb] -
		m.ma[0x0] * m.ma[0x7] * m.ma[0xa] -
		m.ma[0x4] * m.ma[0x2] * m.ma[0xb] +
		m.ma[0x4] * m.ma[0x3] * m.ma[0xa] +
		m.ma[0x8] * m.ma[0x2] * m.ma[0x7] -
		m.ma[0x8] * m.ma[0x3] * m.ma[0x6];

	inv[0xb] = -
		m.ma[0x0] * m.ma[0x5] * m.ma[0xb] +
		m.ma[0x0] * m.ma[0x7] * m.ma[0x9] +
		m.ma[0x4] * m.ma[0x1] * m.ma[0xb] -
		m.ma[0x4] * m.ma[0x3] * m.ma[0x9] -
		m.ma[0x8] * m.ma[0x1] * m.ma[0x7] +
		m.ma[0x8] * m.ma[0x3] * m.ma[0x5];

	inv[0xf] =
		m.ma[0x0] * m.ma[0x5] * m.ma[0xa] -
		m.ma[0x0] * m.ma[0x6] * m.ma[0x9] -
		m.ma[0x4] * m.ma[0x1] * m.ma[0xa] +
		m.ma[0x4] * m.ma[0x2] * m.ma[0x9] +
		m.ma[0x8] * m.ma[0x1] * m.ma[0x6] -
		m.ma[0x8] * m.ma[0x2] * m.ma[0x5];

	det = m.ma[0x0] * inv[0x0] + m.ma[0x1] * inv[0x4] + m.ma[0x2] * inv[0x8] + m.ma[0x3] * inv[0xc];

	if (fabs(det) < 1e-12)
		return m;

	const float rdet = 1.0f / det;

	Matrix4 res;
	for (int i = 0; i < 16; ++i)
		res.ma[i] = inv[i] * rdet;
	return res;
}

Matrix4 transpose(const Matrix4& a) noexcept {
	return Matrix4(
		a.ma[0x0], a.ma[0x4], a.ma[0x8], a.ma[0xc],
		a.ma[0x1], a.ma[0x5], a.ma[0x9], a.ma[0xd],
		a.ma[0x2], a.ma[0x6], a.ma[0xa], a.ma[0xe],
		a.ma[0x3], a.ma[0x7], a.ma[0xb], a.ma[0xf]
	);
}

float determinant(const Matrix4& m) noexcept {
	return (
		m.ma[0xc] * m.ma[0x9] * m.ma[0x6] * m.ma[0x3] - m.ma[0x8] * m.ma[0xd] * m.ma[0x6] * m.ma[0x3] -
		m.ma[0xc] * m.ma[0x5] * m.ma[0xa] * m.ma[0x3] + m.ma[0x4] * m.ma[0xd] * m.ma[0xa] * m.ma[0x3] +
		m.ma[0x8] * m.ma[0x5] * m.ma[0xe] * m.ma[0x3] - m.ma[0x4] * m.ma[0x9] * m.ma[0xe] * m.ma[0x3] -
		m.ma[0xc] * m.ma[0x9] * m.ma[0x2] * m.ma[0x7] + m.ma[0x8] * m.ma[0xd] * m.ma[0x2] * m.ma[0x7] +
		m.ma[0xc] * m.ma[0x1] * m.ma[0xa] * m.ma[0x7] - m.ma[0x0] * m.ma[0xd] * m.ma[0xa] * m.ma[0x7] -
		m.ma[0x8] * m.ma[0x1] * m.ma[0xe] * m.ma[0x7] + m.ma[0x0] * m.ma[0x9] * m.ma[0xe] * m.ma[0x7] +
		m.ma[0xc] * m.ma[0x5] * m.ma[0x2] * m.ma[0xb] - m.ma[0x4] * m.ma[0xd] * m.ma[0x2] * m.ma[0xb] -
		m.ma[0xc] * m.ma[0x1] * m.ma[0x6] * m.ma[0xb] + m.ma[0x0] * m.ma[0xd] * m.ma[0x6] * m.ma[0xb] +
		m.ma[0x4] * m.ma[0x1] * m.ma[0xe] * m.ma[0xb] - m.ma[0x0] * m.ma[0x5] * m.ma[0xe] * m.ma[0xb] -
		m.ma[0x8] * m.ma[0x5] * m.ma[0x2] * m.ma[0xf] + m.ma[0x4] * m.ma[0x9] * m.ma[0x2] * m.ma[0xf] +
		m.ma[0x8] * m.ma[0x1] * m.ma[0x6] * m.ma[0xf] - m.ma[0x0] * m.ma[0x9] * m.ma[0x6] * m.ma[0xf] -
		m.ma[0x4] * m.ma[0x1] * m.ma[0xa] * m.ma[0xf] + m.ma[0x0] * m.ma[0x5] * m.ma[0xa] * m.ma[0xf]
		);
}

Matrix4 rotationAroundXY(float angle) noexcept {
	const float C = cosf(angle);
	const float S = sinf(angle);
	return Matrix4(
		C, S, 0, 0,
		-S, C, 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1
		);
}

Matrix4 rotationAroundYZ(float angle) noexcept {
	const float C = cosf(angle);
	const float S = sinf(angle);
	return Matrix4(
		1, 0, 0, 0,
		0, C, S, 0,
		0, -S, C, 0,
		0, 0, 0, 1
		);
}

Matrix4 rotationAroundZX(float angle) noexcept {
	const float C = cosf(angle);
	const float S = sinf(angle);
	return Matrix4(
		C, 0, -S, 0,
		0, 1, 0, 0,
		S, 0, C, 0,
		0, 0, 0, 1
		);
}

Matrix4 rotationAroundXW(float angle) noexcept {
	const float C = cosf(angle);
	const float S = sinf(angle);
	return Matrix4(
		C, 0, 0, S,
		0, 1, 0, 0,
		0, 0, 1, 0,
		-S, 0, 0, C
		);
}

Matrix4 rotationAroundYW(float angle) noexcept {
	const float C = cosf(angle);
	const float S = sinf(angle);
	return Matrix4(
		1, 0, 0, 0,
		0, C, 0, -S,
		0, 0, 1, 0,
		0, S, 0, C
		);
}

Matrix4 rotationAroundZW(float angle) noexcept {
	const float C = cosf(angle);
	const float S = sinf(angle);
	return Matrix4(
		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, C, -S,
		0, 0, S, C
		);
}
